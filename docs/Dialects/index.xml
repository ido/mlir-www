<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dialects on MLIR</title><link>https://mlir.llvm.org/docs/Dialects/</link><description>Recent content in Dialects on MLIR</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Nov 2019 15:26:15 +0000</lastBuildDate><atom:link href="https://mlir.llvm.org/docs/Dialects/index.xml" rel="self" type="application/rss+xml"/><item><title>'acc' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/OpenACCDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/OpenACCDialect/</guid><description>An OpenACC dialect for MLIR.
This dialect models the construct from the OpenACC 3.0 directive language.
Operation definition acc.data (::mlir::acc::DataOp) acc.init (::mlir::acc::InitOp) acc.loop (::mlir::acc::LoopOp) acc.parallel (::mlir::acc::ParallelOp) acc.shutdown (::mlir::acc::ShutdownOp) acc.terminator (::mlir::acc::TerminatorOp) acc.update (::mlir::acc::UpdateOp) acc.wait (::mlir::acc::WaitOp) acc.yield (::mlir::acc::YieldOp) Operation definition acc.data (::mlir::acc::DataOp) data construct
Syntax:
operation ::= `acc.data` ( `if` `(` $ifCond^ `)` )? ( `copy` `(` $copyOperands^ `:` type($copyOperands) `)` )? ( `copyin` `(` $copyinOperands^ `:` type($copyinOperands) `)` )?</description></item><item><title>'affine' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Affine/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Affine/</guid><description>This dialect provides a powerful abstraction for affine operations and analyses.
Polyhedral Structures Dimensions and Symbols Restrictions on Dimensions and Symbols Affine Expressions Affine Maps Semi-affine maps Integer Sets Operations affine.apply (AffineApplyOp) affine.for (AffineForOp) affine.if (AffineIfOp) affine.load (AffineLoadOp) affine.max (AffineMaxOp) affine.min (AffineMinOp) affine.parallel (AffineParallelOp) affine.prefetch (AffinePrefetchOp) affine.store (AffineStoreOp) affine.vector_load (AffineVectorLoadOp) affine.vector_store (AffineVectorStoreOp) affine.yield (AffineYieldOp) &amp;lsquo;affine.store&amp;rsquo; operation &amp;lsquo;affine.dma_start&amp;rsquo; operation &amp;lsquo;affine.dma_wait&amp;rsquo; operation Polyhedral Structures MLIR uses techniques from polyhedral compilation to make dependence analysis and loop transformations efficient and reliable.</description></item><item><title>'async' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/AsyncDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/AsyncDialect/</guid><description>Types and operations for async dialect
This dialect contains operations for modeling asynchronous execution.
Type definition token type Operation definition async.execute (::mlir::async::ExecuteOp) async.yield (::mlir::async::YieldOp) Type definition token type async.token is a type returned by asynchronous operations, and it becomes ready when the asynchronous operations that created it is completed.
Operation definition async.execute (::mlir::async::ExecuteOp) Asynchronous execute operation
The body region attached to the async.</description></item><item><title>'avx512' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/AVX512/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/AVX512/</guid><description>Operation definition avx512.mask.rndscale (::mlir::avx512::MaskRndScaleOp) avx512.mask.scalef (::mlir::avx512::MaskScaleFOp) Operation definition avx512.mask.rndscale (::mlir::avx512::MaskRndScaleOp) Masked roundscale op
Syntax:
operation ::= `avx512.mask.rndscale` $src `,` $k `,` $a `,` $imm `,` $rounding attr-dict `:` type($dst) The mask.rndscale op is an AVX512 specific op that can lower to the proper LLVMAVX512 operation: llvm.mask.rndscale.ps.512 or llvm.mask.rndscale.pd.512 instruction depending on the type of vectors it is applied to.
From the Intel Intrinsics Guide: Round packed floating-point elements in a to the number of fraction bits specified by imm, and store the results in dst using writemask k (elements are copied from src when the corresponding mask bit is not set).</description></item><item><title>'gpu' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/GPU/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/GPU/</guid><description>Note: this dialect is more likely to change than others in the near future; use with caution.
This dialect provides middle-level abstractions for launching GPU kernels following a programming model similar to that of CUDA or OpenCL. It provides abstractions for kernel invocations (and may eventually provide those for device management) that are not present at the lower level (e.g., as LLVM IR intrinsics for GPUs). Its goal is to abstract away device- and driver-specific manipulations to launch a GPU kernel and provide a simple path towards GPU execution from MLIR.</description></item><item><title>'linalg' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Linalg/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Linalg/</guid><description>Rationale Set of Key Transformations High-Level Description of Linalg Ops Payload-Carrying Ops Tensors and Buffers: Conventions and Limitations Data Representation: Views Metadata Ops Named Payload-Carrying Ops Named Payload Ops Specification Open Issues and Design Alternatives Operations linalg.batch_matmul (::mlir::linalg::BatchMatmulOp) linalg.conv_3d (::mlir::linalg::ConvDHWOp) linalg.conv_2d (::mlir::linalg::ConvHWOp) linalg.conv_3d_ncdhw (::mlir::linalg::ConvNCDHWOp) linalg.conv_2d_nchw (::mlir::linalg::ConvNCHWOp) linalg.conv_1d_ncw (::mlir::linalg::ConvNCWOp) linalg.conv_3d_ndhwc (::mlir::linalg::ConvNDHWCOp) linalg.conv_2d_nhwc (::mlir::linalg::ConvNHWCOp) linalg.conv_1d_nwc (::mlir::linalg::ConvNWCOp) linalg.conv (::mlir::linalg::ConvOp) linalg.conv_1d (::mlir::linalg::ConvWOp) linalg.copy (::mlir::linalg::CopyOp) linalg.dot (::mlir::linalg::DotOp) linalg.fill (::mlir::linalg::FillOp) linalg.</description></item><item><title>'llvm' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/LLVM/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/LLVM/</guid><description>This dialect wraps the LLVM IR types and instructions into MLIR types and operations. It provides several additional operations that are necessary to cover for the differences in the IR structure (e.g., MLIR does not have phi operations and LLVM IR does not have a constant operation).
In this document, we use &amp;ldquo;LLVM IR&amp;rdquo; to designate the intermediate representation of LLVM and &amp;ldquo;LLVM IR dialect&amp;rdquo; to refer to the MLIR dialect reflecting LLVM instructions and types.</description></item><item><title>'nvvm' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/NVVMDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/NVVMDialect/</guid><description>Operation definition nvvm.barrier0 (::mlir::NVVM::Barrier0Op) nvvm.read.ptx.sreg.ntid.x (::mlir::NVVM::BlockDimXOp) nvvm.read.ptx.sreg.ntid.y (::mlir::NVVM::BlockDimYOp) nvvm.read.ptx.sreg.ntid.z (::mlir::NVVM::BlockDimZOp) nvvm.read.ptx.sreg.ctaid.x (::mlir::NVVM::BlockIdXOp) nvvm.read.ptx.sreg.ctaid.y (::mlir::NVVM::BlockIdYOp) nvvm.read.ptx.sreg.ctaid.z (::mlir::NVVM::BlockIdZOp) nvvm.read.ptx.sreg.nctaid.x (::mlir::NVVM::GridDimXOp) nvvm.read.ptx.sreg.nctaid.y (::mlir::NVVM::GridDimYOp) nvvm.read.ptx.sreg.nctaid.z (::mlir::NVVM::GridDimZOp) nvvm.read.ptx.sreg.laneid (::mlir::NVVM::LaneIdOp) nvvm.mma.sync (::mlir::NVVM::MmaOp) nvvm.shfl.sync.bfly (::mlir::NVVM::ShflBflyOp) nvvm.read.ptx.sreg.tid.x (::mlir::NVVM::ThreadIdXOp) nvvm.read.ptx.sreg.tid.y (::mlir::NVVM::ThreadIdYOp) nvvm.read.ptx.sreg.tid.z (::mlir::NVVM::ThreadIdZOp) nvvm.vote.ballot.sync (::mlir::NVVM::VoteBallotOp) nvvm.read.ptx.sreg.warpsize (::mlir::NVVM::WarpSizeOp) Operation definition nvvm.barrier0 (::mlir::NVVM::Barrier0Op) Syntax:
operation ::= `nvvm.barrier0` attr-dict nvvm.read.ptx.sreg.ntid.x (::mlir::NVVM::BlockDimXOp) Syntax:
operation ::= `nvvm.read.ptx.sreg.ntid.x` attr-dict `:` type($res) Results: Result Description res LLVM dialect type nvvm.</description></item><item><title>'omp' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/OpenMPDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/OpenMPDialect/</guid><description>Operation definition omp.barrier (::mlir::omp::BarrierOp) omp.flush (::mlir::omp::FlushOp) omp.master (::mlir::omp::MasterOp) omp.parallel (::mlir::omp::ParallelOp) omp.taskwait (::mlir::omp::TaskwaitOp) omp.taskyield (::mlir::omp::TaskyieldOp) omp.terminator (::mlir::omp::TerminatorOp) Operation definition omp.barrier (::mlir::omp::BarrierOp) barrier construct
Syntax:
operation ::= `omp.barrier` attr-dict The barrier construct specifies an explicit barrier at the point at which the construct appears.
omp.flush (::mlir::omp::FlushOp) flush construct
Syntax:
operation ::= `omp.flush` ( `(` $varList^ `:` type($varList) `)` )? attr-dict The flush construct executes the OpenMP flush operation.</description></item><item><title>'pdl' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/PDLOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/PDLOps/</guid><description>High level pattern definition dialect
PDL presents a high level abstraction for the rewrite pattern infrastructure available in MLIR. This abstraction allows for representing patterns transforming MLIR, as MLIR. This allows for applying all of the benefits that the general MLIR infrastructure provides, to the infrastructure itself. This means that pattern matching can be more easily verified for correctness, targeted by frontends, and optimized.
PDL abstracts over various different aspects of patterns and core MLIR data structures.</description></item><item><title>'pdl_interp' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/PDLInterpOps/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/PDLInterpOps/</guid><description>Interpreted pattern execution dialect
The PDL Interpreter dialect provides a lower level abstraction compared to the PDL dialect, and is targeted towards low level optimization and interpreter code generation. The dialect operations encapsulates low-level pattern match and rewrite &amp;ldquo;primitives&amp;rdquo;, such as navigating the IR (Operation::getOperand), creating new operations (OpBuilder::create), etc. Many of the operations within this dialect also fuse branching control flow with some form of a predicate comparison operation. This type of fusion reduces the amount of work that an interpreter must do when executing.</description></item><item><title>'quant' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/QuantDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/QuantDialect/</guid><description>Type definition UniformQuantizedType Operation definition quant.const_fake_quant (::mlir::quant::ConstFakeQuant) quant.const_fake_quant_per_axis (::mlir::quant::ConstFakeQuantPerAxis) quant.coupled_ref (::mlir::quant::CoupledRefOp) quant.dcast (::mlir::quant::DequantizeCastOp) quant.qcast (::mlir::quant::QuantizeCastOp) quant.region (::mlir::quant::QuantizeRegionOp) quant.return (::mlir::quant::ReturnOp) quant.stats (::mlir::quant::StatisticsOp) quant.stats_ref (::mlir::quant::StatisticsRefOp) quant.scast (::mlir::quant::StorageCastOp) Type definition UniformQuantizedType Operation definition quant.const_fake_quant (::mlir::quant::ConstFakeQuant) Simulates the effect of uniform quantization with const range. Given a const min, max, num_bits and narrow_range attribute, applies the same uniform quantization simulation as is done by the TensorFlow fake_quant_with_min_max_args op.</description></item><item><title>'rocdl' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/ROCDLDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/ROCDLDialect/</guid><description>Operation definition rocdl.barrier (::mlir::ROCDL::BarrierOp) rocdl.workgroup.dim.x (::mlir::ROCDL::BlockDimXOp) rocdl.workgroup.dim.y (::mlir::ROCDL::BlockDimYOp) rocdl.workgroup.dim.z (::mlir::ROCDL::BlockDimZOp) rocdl.workgroup.id.x (::mlir::ROCDL::BlockIdXOp) rocdl.workgroup.id.y (::mlir::ROCDL::BlockIdYOp) rocdl.workgroup.id.z (::mlir::ROCDL::BlockIdZOp) rocdl.grid.dim.x (::mlir::ROCDL::GridDimXOp) rocdl.grid.dim.y (::mlir::ROCDL::GridDimYOp) rocdl.grid.dim.z (::mlir::ROCDL::GridDimZOp) rocdl.buffer.load (::mlir::ROCDL::MubufLoadOp) rocdl.buffer.store (::mlir::ROCDL::MubufStoreOp) rocdl.workitem.id.x (::mlir::ROCDL::ThreadIdXOp) rocdl.workitem.id.y (::mlir::ROCDL::ThreadIdYOp) rocdl.workitem.id.z (::mlir::ROCDL::ThreadIdZOp) rocdl.mfma.f32.16x16x16f16 (::mlir::ROCDL::mfma_f32_16x16x16f16) rocdl.mfma.f32.16x16x1f32 (::mlir::ROCDL::mfma_f32_16x16x1f32) rocdl.mfma.f32.16x16x2bf16 (::mlir::ROCDL::mfma_f32_16x16x2bf16) rocdl.mfma.f32.16x16x4f16 (::mlir::ROCDL::mfma_f32_16x16x4f16) rocdl.mfma.f32.16x16x4f32 (::mlir::ROCDL::mfma_f32_16x16x4f32) rocdl.mfma.f32.16x16x8bf16 (::mlir::ROCDL::mfma_f32_16x16x8bf16) rocdl.mfma.f32.32x32x1f32 (::mlir::ROCDL::mfma_f32_32x32x1f32) rocdl.mfma.f32.32x32x2bf16 (::mlir::ROCDL::mfma_f32_32x32x2bf16) rocdl.mfma.f32.32x32x2f32 (::mlir::ROCDL::mfma_f32_32x32x2f32) rocdl.mfma.f32.32x32x4bf16 (::mlir::ROCDL::mfma_f32_32x32x4bf16) rocdl.mfma.f32.32x32x4f16 (::mlir::ROCDL::mfma_f32_32x32x4f16) rocdl.mfma.f32.32x32x8f16 (::mlir::ROCDL::mfma_f32_32x32x8f16) rocdl.mfma.f32.4x4x1f32 (::mlir::ROCDL::mfma_f32_4x4x1f32) rocdl.mfma.f32.4x4x2bf16 (::mlir::ROCDL::mfma_f32_4x4x2bf16) rocdl.mfma.f32.4x4x4f16 (::mlir::ROCDL::mfma_f32_4x4x4f16) rocdl.mfma.i32.16x16x16i8 (::mlir::ROCDL::mfma_i32_16x16x16i8) rocdl.mfma.i32.16x16x4i8 (::mlir::ROCDL::mfma_i32_16x16x4i8) rocdl.mfma.i32.32x32x4i8 (::mlir::ROCDL::mfma_i32_32x32x4i8) rocdl.</description></item><item><title>'scf' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/SCFDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/SCFDialect/</guid><description>Operation definition scf.for (::mlir::scf::ForOp) scf.if (::mlir::scf::IfOp) scf.parallel (::mlir::scf::ParallelOp) scf.reduce (::mlir::scf::ReduceOp) scf.reduce.return (::mlir::scf::ReduceReturnOp) scf.yield (::mlir::scf::YieldOp) Operation definition scf.for (::mlir::scf::ForOp) for operation
The &amp;ldquo;scf.for&amp;rdquo; operation represents a loop taking 3 SSA value as operands that represent the lower bound, upper bound and step respectively. The operation defines an SSA value for its induction variable. It has one region capturing the loop body. The induction variable is represented as an argument of this region.</description></item><item><title>'shape' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/ShapeDialect/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/ShapeDialect/</guid><description>Types and operations for shape dialect
This dialect contains operations for shape inference.
Note: Unless explicitly stated, all functions that return a shape and take shapes as input, return the invalid shape if one of its operands is an invalid shape. This avoids flagging multiple errors for one verification failure. The dialect itself does not specify how errors should be combined (there are multiple different options, from always choosing first operand, concatting etc.</description></item><item><title>'spv' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/SPIR-V/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/SPIR-V/</guid><description>This document describes the design of the SPIR-V dialect in MLIR. It lists various design choices we made for modeling different SPIR-V mechanisms, and their rationale.
This document also explains in a high-level manner how different components are organized and implemented in the code and gives steps to follow for extending them.
This document assumes familiarity with SPIR-V. SPIR-V is the Khronos Group’s binary intermediate language for representing graphics shaders and compute kernels.</description></item><item><title>'std' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Standard/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Standard/</guid><description>This dialect provides documentation for operations within the Standard dialect.
Note: This dialect is a collection of operations for several different concepts, and should be split into multiple more-focused dialects accordingly.
Please post an RFC on the forum before adding or changing any operation in this dialect.
Operations std.absf (AbsFOp) std.addcf (AddCFOp) std.addf (AddFOp) std.addi (AddIOp) std.alloc (AllocOp) std.alloca (AllocaOp) std.and (AndOp) std.assert (AssertOp) std.assume_alignment (AssumeAlignmentOp) std.atan2 (Atan2Op) std.</description></item><item><title>'vector' Dialect</title><link>https://mlir.llvm.org/docs/Dialects/Vector/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://mlir.llvm.org/docs/Dialects/Vector/</guid><description>Positioning in the Codegen Infrastructure Components of a Generic Retargetable Vector-Level Dialect Short Description of the Existing Infrastructure LLVM level Hardware Vector Ops Virtual Vector Ops Virtual Vector Rewrite Patterns Virtual Vector to Hardware Vector Lowering Rationale Hardware as vector Machines of Minimum Granularity Transformations Problems Avoided The Big Out-Of-Scope Piece: Automatic Vectorization Bikeshed Naming Discussion DeeperDive Alternatives For Lowering an n-D Vector Type to LLVM Constraints Inherited from LLVM (see LangRef) Nested Aggregate Flattened 1-D Vector Type Discussion Relationship to LLVM matrix type proposal.</description></item></channel></rss>